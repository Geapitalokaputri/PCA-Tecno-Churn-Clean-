# -*- coding: utf-8 -*-
"""GEA PITALOKA PUTRI - Dimensionality Reduction PCA Telco Churn Clean.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8yRwzy70YKMtMypT9mfzu5vqDM73iOy

# Dimensionality Reduction

## Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Import Datasets"""

import os

from google.colab import drive
drive.mount('/content/gdrive')

telco_churn_clean = pd.read_csv("/content/gdrive/My Drive/telco_churn_clean.csv")
telco_churn_clean.info()

"""## Regression"""

# admission head
telco_churn_clean.head()

"""## PCA"""

# telco_churn_clean head
telco_churn_clean.head()

# inspect target variable
telco_churn_clean[['Churn']].value_counts()

# split train-test
from sklearn.model_selection import train_test_split

X = telco_churn_clean.drop(columns=['customerID','Gender','SeniorCitizen','Partner','Dependents','Contract','PaperlessBilling','PaymentMethod','Churn'])
y = telco_churn_clean['Churn']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# standardscaler features
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# PCA
from sklearn.decomposition import PCA

pca = PCA(random_state=42).fit(X_train)

# individual explained variance by each principal component plot
plt.bar(range(1, len(pca.explained_variance_ratio_)+1), pca.explained_variance_ratio_)
plt.xlabel('Principal Component')
plt.ylabel('Variance Explained')
plt.title('Scree Plot')
plt.show()

# cumulative variance explained
cumulative_variance = np.cumsum(pca.explained_variance_ratio_)

# plot it
plt.plot(range(1, len(cumulative_variance) + 1), cumulative_variance, marker='o')
plt.xlabel('Principal Component')
plt.ylabel('Variance Explained')
plt.title('Scree Plot')
plt.show()

# optimal principal components
n = np.argmax(cumulative_variance >= 0.95) + 1
n

# choose n = 4 as principal components
pca = PCA(n_components=4, random_state=42)
pca.fit(X_train)

# transform X_train and X_test
X_train_pca = pca.transform(X_train)
X_test_pca = pca.transform(X_test)

X_train_pca

"""Worfkflow PCA selesai sampai di sini

### Train model using PCA dataset
"""

# train logistic regression model
from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression()
logreg.fit(X_train_pca, y_train)

# calculate classification_report on train data
from sklearn.metrics import classification_report

y_pred_train = logreg.predict(X_train_pca)
print(classification_report(y_train, y_pred_train))

# calculate classification report on test data
y_pred_test = logreg.predict(X_test_pca)
print(classification_report(y_test, y_pred_test))

"""### Benchmark Model tanpa PCA"""

# benchmark logistic regression model on original features (non PCA)
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

# calculate classification_report on train data
y_pred_train = logreg.predict(X_train)
print(classification_report(y_train, y_pred_train))

# calculate classification report on test data
y_pred_test = logreg.predict(X_test)
print(classification_report(y_test, y_pred_test))